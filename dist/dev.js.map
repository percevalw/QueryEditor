{"version":3,"sources":["dev.js","index.js"],"names":["MongoParser","require","treeify","main","input","mongo_parser","parsed","match","t","symbol","class_names","e","error","message","text","output","parse","console","log","asTree","antlr4","GrammarLexer","GrammarParser","Trees","RuleContext","Utils","util","ErrorListener","_","ParserErrorListener","call","errors","prototype","Object","create","constructor","syntaxError","recognizer","offendingSymbol","line","column","msg","expected_tokens","_errHandler","getExpectedTokens","expected_tokens_names","i","intervals","length","v","j","start","stop","push","elementName","literalNames","symbolicNames","getCurrentToken","getTokenErrorDisplay","substr","expected","begin","end","reset","INSTANCE","AstMongoTransformer","operatorToMongo","bind","literalToMongo","arrayToMongo","criteriaToMongo","queryToMongo","process","highlights","operator","literal","children","parseInt","array","filter","c","rule","map","criteria","query","group_operator","transformed","tree","ruleNames","parser","s","getNodeText","res","altNumber","getAltNumber","INVALID_ALT_NUMBER","ruleIndex","type","tokens","getChildren","astToJSON","antlr_tree","no_query","ast","syntax","get_suggestions","apply_syntax","symbol_token_mapping","existing","suggestions","flatten","symbol_suggestions","filtered","suggestion","forEach","join","values","error_listener","chars","InputStream","lexer","CommonTokenStream","n","removeErrorListeners","addErrorListener","buildParseTrees","visitor_res","ast_mongo_transformer","mongo_query","module","exports"],"mappings":";;AAAA;;;;AAIA,IAAMA,cAAcC,QAAQ,cAAR,EAAwBD,WAA5C;AACA,IAAIE,UAAUD,QAAQ,SAAR,CAAd;;AAEA,IAAME,OAAO,SAAPA,IAAO,CAASC,KAAT,EAAgB;AACzB,QAAMC,eAAe,IAAIL,WAAJ,CAAgB;AACjCM,gBAAQ,CAAC;AACLC,mBAAO,eAACC,CAAD;AAAA,uBAAOA,EAAEC,MAAF,IAAY,KAAnB;AAAA,aADF;AAELC,yBAAa,qBAACC,CAAD;AAAA,uBAAO,gBAAP;AAAA;AAFR,SAAD,CADyB;AAKjCC,eAAO;AACHC,qBAAS,iBAACF,CAAD;AAAA,uBAAO,oBAAP;AAAA,aADN,EACkC;AACrCD,yBAAa,qBAACC,CAAD;AAAA,uBAAO,0BAA0BA,EAAEG,IAAF,IAAU,OAAV,GAAoB,MAApB,GAA4B,EAAtD,CAAP;AAAA;AAFV;AAL0B,KAAhB,CAArB;AAUA,QAAMC,SAASV,aAAaW,KAAb,CAAmBZ,KAAnB,CAAf;;AAEAa,YAAQC,GAAR,CAAYhB,QAAQiB,MAAR,CAAeJ,MAAf,EAAuB,IAAvB,CAAZ;AACH,CAdD;;AAgBAZ,KAAK,yCAAL;ACvBA;;AAEA;;;;;;;;AACA,IAAIiB,SAASnB,QAAQ,cAAR,CAAb;AACA,IAAIoB,eAAepB,QAAQ,qBAAR,CAAnB;AACA,IAAIqB,gBAAgBrB,QAAQ,sBAAR,CAApB;AACA,IAAIsB,QAAQtB,QAAQ,mBAAR,EAA6BsB,KAAzC;AACA,IAAIC,cAAcvB,QAAQ,oBAAR,CAAlB;AACA,IAAIwB,QAAQxB,QAAQ,cAAR,CAAZ;AACA,IAAIyB,OAAOzB,QAAQ,MAAR,CAAX;AACA,IAAI0B,gBAAgB1B,QAAQ,4BAAR,EAAsC0B,aAA1D;AACA,IAAIC,IAAI3B,QAAQ,QAAR,CAAR;AACA;;AAEA;;AAEA,SAAS4B,mBAAT,GAA+B;AAC3BF,kBAAcG,IAAd,CAAmB,IAAnB;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,WAAO,IAAP;AACH;;AAEDF,oBAAoBG,SAApB,GAAgCC,OAAOC,MAAP,CAAcP,cAAcK,SAA5B,CAAhC;AACAH,oBAAoBG,SAApB,CAA8BG,WAA9B,GAA4CN,mBAA5C;;AAEAA,oBAAoBG,SAApB,CAA8BI,WAA9B,GAA4C,UAASC,UAAT,EAAqBC,eAArB,EAAsCC,IAAtC,EAA4CC,MAA5C,EAAoDC,GAApD,EAAyD9B,CAAzD,EAA4D;AACpGM,YAAQC,GAAR,CAAYmB,UAAZ;AACA,QAAIK,kBAAkBL,WAAWM,WAAX,CAAuBC,iBAAvB,CAAyCP,UAAzC,CAAtB;AACA,QAAIQ,wBAAwB,EAA5B;;AAEA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,gBAAgBK,SAAhB,CAA0BC,MAA9C,EAAsDF,GAAtD,EAA2D;AACvD,YAAIG,IAAIP,gBAAgBK,SAAhB,CAA0BD,CAA1B,CAAR;AACA,aAAK,IAAII,IAAID,EAAEE,KAAf,EAAsBD,IAAID,EAAEG,IAA5B,EAAkCF,GAAlC,EAAuC;AACnCL,kCAAsBQ,IAAtB,CAA2BX,gBAAgBY,WAAhB,CAA4BjB,WAAWkB,YAAvC,EAAqDlB,WAAWmB,aAAhE,EAA+EN,CAA/E,CAA3B;AACH;AACJ;;AAED,QAAI1C,IAAI6B,WAAWoB,eAAX,EAAR;AACA,QAAI3C,OAAOuB,WAAWqB,oBAAX,CAAgClD,CAAhC,CAAX;AACAM,WAAOA,KAAK6C,MAAL,CAAY,CAAZ,EAAe7C,KAAKkC,MAAL,GAAc,CAA7B,CAAP;AACA,SAAKjB,MAAL,CAAYsB,IAAZ,CAAiB;AACbO,kBAAUf,qBADG;AAEb/B,cAAMA,IAFO;AAGb+C,eAAOrD,EAAE2C,KAHI;AAIbW,aAAMhD,QAAQ,OAAT,GAAoBN,EAAE2C,KAAtB,GAA8B3C,EAAE4C;AAJxB,KAAjB;AAMH,CArBD;;AAuBAvB,oBAAoBG,SAApB,CAA8B+B,KAA9B,GAAsC,YAAW;AAC7C,SAAKhC,MAAL,GAAc,EAAd;AACH,CAFD;;AAIAF,oBAAoBmC,QAApB,GAA+B,IAAInC,mBAAJ,EAA/B;AACA;;IAEMoC;AACF,mCAAc;AAAA;;AACV,aAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAvB;AACA,aAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AACA,aAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAApB;AACA,aAAKG,eAAL,GAAuB,KAAKA,eAAL,CAAqBH,IAArB,CAA0B,IAA1B,CAAvB;AACA,aAAKI,YAAL,GAAoB,KAAKA,YAAL,CAAkBJ,IAAlB,CAAuB,IAAvB,CAApB;AACA,aAAKK,OAAL,GAAe,KAAKA,OAAL,CAAaL,IAAb,CAAkB,IAAlB,CAAf;;AAEA,aAAKM,UAAL,GAAkB,EAAlB;AACH;;;;wCAEeC,UAAU;AACtB,mBAAO;AACH,sBAAM,KADH;AAEH,sBAAM,MAFH;AAGH,sBAAM,MAHH;AAIH,qBAAK,KAJF;AAKH,qBAAK,KALF;AAMH,uBAAO,MANJ;AAOH,sBAAM,KAPH;AAQH,sBAAM;AARH,cASLA,SAAS5D,IATJ,CAAP;AAUH;;;uCAEc6D,SAAS;AACpB,gBAAIA,QAAQC,QAAR,CAAiB,CAAjB,EAAoBnE,MAApB,IAA8B,QAAlC,EACI,OAAOoE,SAASF,QAAQC,QAAR,CAAiB,CAAjB,EAAoB9D,IAA7B,CAAP,CADJ,KAEK,IAAI6D,QAAQC,QAAR,CAAiB,CAAjB,EAAoBnE,MAApB,IAA8B,QAAlC,EACD,OAAOkE,QAAQC,QAAR,CAAiB,CAAjB,EAAoB9D,IAApB,CAAyB6C,MAAzB,CAAgC,CAAhC,EAAmCgB,QAAQC,QAAR,CAAiB,CAAjB,EAAoB9D,IAApB,CAAyBkC,MAAzB,GAAkC,CAArE,CAAP;AACP;;;qCAEY8B,OAAO;AAChB,mBAAOA,MAAMF,QAAN,CAAeG,MAAf,CAAsB;AAAA,uBAAKC,EAAEC,IAAF,IAAU,SAAf;AAAA,aAAtB,EAAgDC,GAAhD,CAAoD,KAAKd,cAAzD,CAAP;AACH;;;wCAEee,UAAU;AACtB,gBAAIA,SAASP,QAAT,CAAkB,CAAlB,EAAqBK,IAArB,IAA6B,SAAjC,EAA4C;AACxC,2CACKE,SAASP,QAAT,CAAkB,CAAlB,EAAqB9D,IAD1B,sBAES,KAAKoD,eAAL,CAAqBiB,SAASP,QAAT,CAAkB,CAAlB,CAArB,CAFT,EAEsD,KAAKR,cAAL,CAAoBe,SAASP,QAAT,CAAkB,CAAlB,CAApB,CAFtD;AAKH,aAND,MAOK;AACD,2CACKO,SAASP,QAAT,CAAkB,CAAlB,EAAqB9D,IAD1B,sBAES,KAAKoD,eAAL,CAAqBiB,SAASP,QAAT,CAAkB,CAAlB,CAArB,CAFT,EAEsD,KAAKP,YAAL,CAAkBc,SAASP,QAAT,CAAkB,CAAlB,CAAlB,CAFtD;AAKH;AAEJ;;;qCAEYQ,OAAO;AAAA;;AAChB,gBAAIC,iBAAiB,IAArB;AACApE,oBAAQC,GAAR,CAAY,OAAZ,EAAqBkE,KAArB;AACA,gBAAIA,MAAMR,QAAN,CAAe5B,MAAf,IAAyB,CAA7B,EACI,OAAO,KAAKsB,eAAL,CAAqBc,MAAMR,QAAN,CAAe,CAAf,CAArB,CAAP,CADJ,KAEK,IAAIQ,MAAMR,QAAN,CAAe5B,MAAf,IAAyB,CAA7B,EACDqC,iBAAiBD,MAAMR,QAAN,CAAe,CAAf,CAAjB,CADC,KAEA,IAAIQ,MAAMR,QAAN,CAAe5B,MAAf,IAAyB,CAA7B,EACDqC,iBAAiBD,MAAMR,QAAN,CAAe,CAAf,CAAjB;AACJ,gBAAIU,cAAcF,MAAMR,QAAN,CACbG,MADa,CACN;AAAA,uBAAKC,EAAEC,IAAF,IAAU,OAAV,IAAqBD,EAAEC,IAAF,IAAU,UAApC;AAAA,aADM,EAEbC,GAFa,CAER;AAAA,uBAAKF,EAAEC,IAAF,IAAU,OAAV,GAAoB,MAAKV,YAAL,CAAkBS,CAAlB,CAApB,GAA2C,MAAKV,eAAL,CAAqBU,CAArB,CAAhD;AAAA,aAFQ,CAAlB;AAGA,uCACK,KAAKd,eAAL,CAAqBmB,cAArB,CADL,EAC4CC,WAD5C;AAGH;;;kCAESC,MAAMC,WAAWnD,YAAY;AAAA;;AACnCmD,wBAAYA,aAAa,IAAzB;AACAnD,yBAAaA,aAAaA,UAAb,GAA2BkD,OAAOA,KAAKE,MAAZ,GAAqB,IAA7D;AACA,gBAAGpD,UAAH,EAAe;AACXmD,4BAAYnD,WAAWmD,SAAvB;AACH;;AAED,gBAAIE,IAAInE,MAAMoE,WAAN,CAAkBJ,IAAlB,EAAwBC,SAAxB,CAAR;;AAEA,gBAAII,MAAM,EAAV;AACA,gBAAIL,gBAAgB/D,YAAYA,WAAhC,EAA6C;AACzC,oBAAIqE,YAAYN,KAAKO,YAAL,EAAhB;AACA,oBAAKD,aAAWrE,YAAYuE,kBAA5B,EAAiD;AAC7CH,wBAAIX,IAAJ,GAAWO,UAAUD,KAAKS,SAAf,IAA0B,GAA1B,GAA8BH,SAAzC;AACH;AACDD,oBAAIX,IAAJ,GAAWO,UAAUD,KAAKS,SAAf,CAAX;AACH,aAND,MAOK,IAAIT,KAAK9E,MAAT,EAAiB;AAClBmF,oBAAInF,MAAJ,GAAa4B,WAAWkB,YAAX,CAAwBgC,KAAK9E,MAAL,CAAYwF,IAApC,KAA6C5D,WAAWmB,aAAX,CAAyB+B,KAAK9E,MAAL,CAAYwF,IAArC,CAA1D,CADkB,CACmF;AACrGL,oBAAI9E,IAAJ,GAAWyE,KAAK9E,MAAL,CAAYK,IAAvB;AACA8E,oBAAI/B,KAAJ,GAAY0B,KAAK9E,MAAL,CAAY0C,KAAxB;AACAyC,oBAAI9B,GAAJ,GAAUyB,KAAK9E,MAAL,CAAY2C,IAAtB;;AAEA,oBAAIwC,IAAInF,MAAR,EACI,KAAKyF,MAAL,CAAY7C,IAAZ,CAAiBuC,GAAjB;AACP;AACDA,gBAAIhB,QAAJ,GAAcrD,MAAM4E,WAAN,CAAkBZ,IAAlB,EAAwBL,GAAxB,CAA4B;AAAA,uBAAK,OAAKkB,SAAL,CAAepB,CAAf,EAAkBQ,SAAlB,EAA6BnD,UAA7B,CAAL;AAAA,aAA5B,CAAd;AACA,mBAAOuD,GAAP;AACH;;;gCAEOS,YAAYC,UAAU;AAC1B,iBAAKJ,MAAL,GAAc,EAAd;AACA,gBAAMK,MAAM,KAAKH,SAAL,CAAeC,UAAf,CAAZ;AACA,mBAAO;AACHE,qBAAKD,WAAW,IAAX,GAAkB,KAAK/B,YAAL,CAAkBgC,IAAI3B,QAAJ,CAAa,CAAb,CAAlB,CADpB;AAEHsB,wBAAQ,KAAKA;AAFV,aAAP;AAIH;;;;;;IAGClG;AACF,yBAAYwG,MAAZ,EAAoB;AAAA;;AAChB,aAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBtC,IAArB,CAA0B,IAA1B,CAAvB;AACA,aAAKuC,YAAL,GAAoB,KAAKA,YAAL,CAAkBvC,IAAlB,CAAuB,IAAvB,CAApB;AACA,aAAKqC,MAAL,GAAcA,MAAd;AACA,aAAKG,oBAAL,GAA4B;AACxB,uBAAW,CAAC,MAAD,EAAS,MAAT,EAAiB,OAAjB,EAA0B,OAA1B,CADa;AAExB,gCAAoB,CAAC,MAAD,EAAS,QAAT,CAFI;AAGxB,8BAAkB,CAAC,OAAD,EAAU,SAAV,CAHM;AAIxB,4BAAgB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAJQ;AAKxB,4BAAgB,CAAC,IAAD,EAAO,QAAP,CALQ;AAMxB,iBAAK,EANmB;AAOxB,iBAAK,EAPmB;AAQxB,qBAAS;AARe,SAA5B;AAUH;;;;wCAEe/C,UAAUgD,UAAU;AAAA;;AAChC3F,oBAAQC,GAAR,CAAY,UAAZ,EAAwB0C,QAAxB;AACA,gBAAMiD,cAAcjF,EAAEkF,OAAF,CAAUlD,SAASsB,GAAT,CAAa,aAAK;AAC5C,oBAAI6B,qBAAqB,OAAKJ,oBAAL,CAA0BnG,CAA1B,KAAgCA,CAAzD;AACA,uBAAQuG,sBAAsB,EAA9B;AACH,aAH6B,CAAV,EAGhB,IAHgB,CAApB;AAIA,gBAAMC,WAAWH,YAAY9B,MAAZ,CAAmB,sBAAc;AAC9C9D,wBAAQC,GAAR,CAAY,UAAZ,EAAwB+F,UAAxB,EAAoCL,QAApC;AACA,uBAAQK,WAAWtD,MAAX,CAAkB,CAAlB,EAAqBiD,SAAS5D,MAA9B,KAAyC4D,QAAjD;AACH,aAHgB,CAAjB;AAIA,gBAAII,SAAShE,MAAT,IAAmB,CAAvB,EAA0B;AACtB,uBAAO6D,WAAP;AACH;AACD,mBAAOG,QAAP;AACH;;;qCAEYd,QAAQnE,QAAQ;AAAA;;AACzB,gBAAM6D,MAAM,EAAZ;AACA,gBAAI,KAAKY,MAAL,CAAYlG,MAAhB,EACI4F,OAAOgB,OAAP,CAAe,aAAK;AAChB,oBAAIxG,cAAc,OAAK8F,MAAL,CAAYlG,MAAZ,CAAmByE,MAAnB,CAA0B,aAAK;AAC7C,2BAAOW,EAAEnF,KAAF,CAAQC,CAAR,CAAP;AACH,iBAFiB,EAEf0E,GAFe,CAEX;AAAA,2BAAKQ,EAAEhF,WAAF,CAAcF,CAAd,CAAL;AAAA,iBAFW,CAAlB;AAGAoF,oBAAIpF,EAAEqD,KAAF,GAAU,GAAV,GAAgBrD,EAAEsD,GAAtB,IAA6B;AACzBD,2BAAOrD,EAAEqD,KADgB;AAEzBC,yBAAKtD,EAAEsD,GAFkB;AAGzBpD,iCAAaA,YAAYyG,IAAZ,CAAiB,GAAjB;AAHY,iBAA7B;AAKH,aATD;AAUJpF,mBAAOmF,OAAP,CAAe,aAAK;AAChBtB,oBAAIjF,EAAEkD,KAAF,GAAU,GAAV,GAAgBlD,EAAEmD,GAAtB,IAA6B;AACzBD,2BAAOlD,EAAEkD,KADgB;AAEzBC,yBAAKnD,EAAEmD,GAFkB;AAGzBpD,iCAAa,OAAK8F,MAAL,CAAY5F,KAAZ,CAAkBF,WAAlB,CAA8BC,CAA9B,CAHY;AAIzBkG,iCAAa,OAAKJ,eAAL,CAAqB9F,EAAEiD,QAAvB,EAAiCjD,EAAEG,IAAnC,CAJY;AAKzBD,6BAAS,OAAK2F,MAAL,CAAY5F,KAAZ,CAAkBC,OAAlB,CAA0BF,CAA1B;AALgB,iBAA7B;AAOH,aARD;AASAM,oBAAQC,GAAR,CAAY0E,GAAZ;AACA,mBAAOhE,EAAEwF,MAAF,CAASxB,GAAT,CAAP;AACH;;;8BAEKxF,OAAO;AACTa,oBAAQC,GAAR,CAAY,cAAZ,EAA4Bd,KAA5B;AACA,gBAAIiH,iBAAiB,IAAIxF,mBAAJ,EAArB;AACA,gBAAIyF,QAAQ,IAAIlG,OAAOmG,WAAX,CAAuBnH,KAAvB,CAAZ;AACA,gBAAIoH,QAAQ,IAAInG,aAAaA,YAAjB,CAA8BiG,KAA9B,CAAZ;AACA,gBAAIpB,SAAU,IAAI9E,OAAOqG,iBAAX,CAA6BD,KAA7B,CAAd;AACA,gBAAI/B,SAAS,IAAInE,cAAcA,aAAlB,CAAgC4E,MAAhC,CAAb;AACAT,mBAAOlC,YAAP,GAAsBkC,OAAOlC,YAAP,CAAoB2B,GAApB,CAAwB;AAAA,uBAAK,CAACwC,CAAD,GAAK,IAAL,GAAYA,EAAE/D,MAAF,CAAS,CAAT,EAAY+D,EAAE1E,MAAF,GAAW,CAAvB,CAAjB;AAAA,aAAxB,CAAtB;AACAyC,mBAAOkC,oBAAP;AACAlC,mBAAOmC,gBAAP,CAAwBP,cAAxB;;AAEA5B,mBAAOoC,eAAP,GAAyB,IAAzB;AACA,gBAAItC,OAAOE,OAAOtF,IAAP,EAAX;;AAEA,gBAAM2H,cAAcC,sBAAsBvD,OAAtB,CAA8Be,IAA9B,EAAoC8B,eAAetF,MAAf,CAAsBiB,MAAtB,GAA6B,CAAjE,CAApB;AACA/B,oBAAQC,GAAR,CAAY,OAAZ,EAAqBmG,eAAetF,MAApC;AACA,gBAAMA,SAASsF,eAAetF,MAA9B;AACA,mBAAO;AACHiG,6BAAaF,YAAYvB,GADtB;AAEH9B,4BAAY,KAAKiC,YAAL,CAAkBoB,YAAY5B,MAA9B,EAAsCnE,MAAtC;AAFT,aAAP;AAIH;;;;;;AAGL,IAAMgG,wBAAwB,IAAI9D,mBAAJ,EAA9B;;AAEAgE,OAAOC,OAAP,GAAiB,EAAClI,aAAaA,WAAd,EAAjB","file":"dev.js","sourcesContent":["/**\n * Created by perceval on 11/12/2016.\n */\n\nconst MongoParser = require('../src/index').MongoParser;\nvar treeify = require('treeify');\n\nconst main = function(input) {\n    const mongo_parser = new MongoParser({\n        parsed: [{\n            match: (t) => t.symbol == \"AND\",\n            class_names: (e) => 'group-operator'\n        }],\n        error: {\n            message: (e) => 'Expected\\xA0:\\xA0/',// + e.expected.join(',\\xA0'),\n            class_names: (e) => 'err ge-tooltip-error' + (e.text == \"<EOF>\" ? ' eof': '')\n        }\n    });\n    const output = mongo_parser.parse(input);\n\n    console.log(treeify.asTree(output, true));\n};\n\nmain(\"ask == 5 AND mid == 6 AND trades IN 5,6\");\n","\"use strict\";\n\n// region INCLUDES\nvar antlr4 = require('antlr4/index');\nvar GrammarLexer = require('../gen/GrammarLexer');\nvar GrammarParser = require('../gen/GrammarParser');\nvar Trees = require('antlr4/tree/Trees').Trees;\nvar RuleContext = require('antlr4/RuleContext');\nvar Utils = require('antlr4/Utils');\nvar util = require('util');\nvar ErrorListener = require('antlr4/error/ErrorListener').ErrorListener;\nvar _ = require('lodash');\n// endregion INCLUDES\n\n// region ParserErrorListener Definition\n\nfunction ParserErrorListener() {\n    ErrorListener.call(this);\n    this.errors = [];\n    return this;\n}\n\nParserErrorListener.prototype = Object.create(ErrorListener.prototype);\nParserErrorListener.prototype.constructor = ParserErrorListener;\n\nParserErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {\n    console.log(recognizer);\n    var expected_tokens = recognizer._errHandler.getExpectedTokens(recognizer);\n    var expected_tokens_names = [];\n\n    for (var i = 0; i < expected_tokens.intervals.length; i++) {\n        var v = expected_tokens.intervals[i];\n        for (var j = v.start; j < v.stop; j++) {\n            expected_tokens_names.push(expected_tokens.elementName(recognizer.literalNames, recognizer.symbolicNames, j));\n        }\n    }\n\n    var t = recognizer.getCurrentToken();\n    let text = recognizer.getTokenErrorDisplay(t);\n    text = text.substr(1, text.length - 2);\n    this.errors.push({\n        expected: expected_tokens_names,\n        text: text,\n        begin: t.start,\n        end: (text == \"<EOF>\") ? t.start : t.stop\n    });\n};\n\nParserErrorListener.prototype.reset = function() {\n    this.errors = [];\n}\n\nParserErrorListener.INSTANCE = new ParserErrorListener();\n// endregion\n\nclass AstMongoTransformer {\n    constructor() {\n        this.operatorToMongo = this.operatorToMongo.bind(this);\n        this.literalToMongo = this.literalToMongo.bind(this);\n        this.arrayToMongo = this.arrayToMongo.bind(this);\n        this.criteriaToMongo = this.criteriaToMongo.bind(this);\n        this.queryToMongo = this.queryToMongo.bind(this);\n        this.process = this.process.bind(this);\n\n        this.highlights = [];\n    }\n\n    operatorToMongo(operator) {\n        return {\n            '==': '$eq',\n            '>=': '$gte',\n            '<=': '$lte',\n            '<': '$lt',\n            '>': '$gt',\n            'AND': '$and',\n            'IN': '$in',\n            'OR': '$or'\n        }[operator.text];\n    }\n\n    literalToMongo(literal) {\n        if (literal.children[0].symbol == 'NUMBER')\n            return parseInt(literal.children[0].text)\n        else if (literal.children[0].symbol == 'STRING')\n            return literal.children[0].text.substr(1, literal.children[0].text.length - 2);\n    }\n\n    arrayToMongo(array) {\n        return array.children.filter(c => c.rule == 'literal').map(this.literalToMongo);\n    }\n\n    criteriaToMongo(criteria) {\n        if (criteria.children[2].rule == 'literal') {\n            return {\n                [criteria.children[0].text]: {\n                    [this.operatorToMongo(criteria.children[1])]: this.literalToMongo(criteria.children[2])\n                }\n            }\n        }\n        else {\n            return {\n                [criteria.children[0].text]: {\n                    [this.operatorToMongo(criteria.children[1])]: this.arrayToMongo(criteria.children[2])\n                }\n            }\n        }\n\n    }\n\n    queryToMongo(query) {\n        let group_operator = null;\n        console.log(\"QUERY\", query);\n        if (query.children.length == 1)\n            return this.criteriaToMongo(query.children[0]);\n        else if (query.children.length == 3)\n            group_operator = query.children[1];\n        else if (query.children.length == 5)\n            group_operator = query.children[2];\n        var transformed = query.children\n            .filter(c => c.rule == 'query' || c.rule == 'criteria')\n            .map((c => c.rule == 'query' ? this.queryToMongo(c) : this.criteriaToMongo(c)));\n        return {\n            [this.operatorToMongo(group_operator)]: transformed\n        };\n    }\n\n    astToJSON(tree, ruleNames, recognizer) {\n        ruleNames = ruleNames || null;\n        recognizer = recognizer ? recognizer : (tree ? tree.parser : null);\n        if(recognizer) {\n            ruleNames = recognizer.ruleNames;\n        }\n\n        var s = Trees.getNodeText(tree, ruleNames);\n\n        var res = {};\n        if (tree instanceof RuleContext.RuleContext) {\n            var altNumber = tree.getAltNumber();\n            if ( altNumber!=RuleContext.INVALID_ALT_NUMBER ) {\n                res.rule = ruleNames[tree.ruleIndex]+\":\"+altNumber;\n            }\n            res.rule = ruleNames[tree.ruleIndex];\n        }\n        else if (tree.symbol) {\n            res.symbol = recognizer.literalNames[tree.symbol.type] || recognizer.symbolicNames[tree.symbol.type];//.toString(recognizer.literalNames, recognizer.symbolicNames))\n            res.text = tree.symbol.text;\n            res.begin = tree.symbol.start;\n            res.end = tree.symbol.stop;\n\n            if (res.symbol)\n                this.tokens.push(res);\n        }\n        res.children= Trees.getChildren(tree).map(c => this.astToJSON(c, ruleNames, recognizer));\n        return res;\n    };\n\n    process(antlr_tree, no_query) {\n        this.tokens = [];\n        const ast = this.astToJSON(antlr_tree);\n        return {\n            ast: no_query ? null : this.queryToMongo(ast.children[0]),\n            tokens: this.tokens\n        }\n    }\n}\n\nclass MongoParser {\n    constructor(syntax) {\n        this.get_suggestions = this.get_suggestions.bind(this);\n        this.apply_syntax = this.apply_syntax.bind(this);\n        this.syntax = syntax;\n        this.symbol_token_mapping = {\n            'LIT_VAR': ['name', 'size', 'color', 'price'],\n            'ENS_VAR_SINGULAR': ['part', 'friend'],\n            'ENS_VAR_PLURAL': ['parts', 'friends'],\n            'LIT_OPERATOR': ['==', '>=', '<='],\n            'ENS_OPERATOR': ['in', 'not in'],\n            '(': [],\n            ')': [],\n            '<EOF>': []\n        }\n    }\n\n    get_suggestions(expected, existing) {\n        console.log(\"EXPECTED\", expected)\n        const suggestions = _.flatten(expected.map(t => {\n            let symbol_suggestions = this.symbol_token_mapping[t] || t;\n            return (symbol_suggestions || [])\n        }), true);\n        const filtered = suggestions.filter(suggestion => {\n            console.log(\"EXISINTG\", suggestion, existing);\n            return (suggestion.substr(0, existing.length) == existing);\n        });\n        if (filtered.length == 0) {\n            return suggestions;\n        }\n        return filtered;\n    }\n\n    apply_syntax(tokens, errors) {\n        const res = {};\n        if (this.syntax.parsed)\n            tokens.forEach(t => {\n                var class_names = this.syntax.parsed.filter(s => {\n                    return s.match(t);\n                }).map(s => s.class_names(t));\n                res[t.begin + '-' + t.end] = {\n                    begin: t.begin,\n                    end: t.end,\n                    class_names: class_names.join(' ')\n                }\n            });\n        errors.forEach(e => {\n            res[e.begin + '-' + e.end] = {\n                begin: e.begin,\n                end: e.end,\n                class_names: this.syntax.error.class_names(e),\n                suggestions: this.get_suggestions(e.expected, e.text),\n                message: this.syntax.error.message(e)\n            }\n        });\n        console.log(res);\n        return _.values(res);\n    }\n\n    parse(input) {\n        console.log(\"PARSER INPUT\", input);\n        var error_listener = new ParserErrorListener();\n        var chars = new antlr4.InputStream(input);\n        var lexer = new GrammarLexer.GrammarLexer(chars);\n        var tokens  = new antlr4.CommonTokenStream(lexer);\n        var parser = new GrammarParser.GrammarParser(tokens);\n        parser.literalNames = parser.literalNames.map(n => !n ? null : n.substr(1, n.length - 2));\n        parser.removeErrorListeners();\n        parser.addErrorListener(error_listener);\n\n        parser.buildParseTrees = true;\n        var tree = parser.main();\n\n        const visitor_res = ast_mongo_transformer.process(tree, error_listener.errors.length>0);\n        console.log(\"ERROR\", error_listener.errors);\n        const errors = error_listener.errors;\n        return {\n            mongo_query: visitor_res.ast,\n            highlights: this.apply_syntax(visitor_res.tokens, errors)\n        }\n    }\n}\n\nconst ast_mongo_transformer = new AstMongoTransformer();\n\nmodule.exports = {MongoParser: MongoParser};"]}