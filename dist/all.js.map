{"version":3,"sources":["client.js","dev.js","index.js"],"names":["main","require","antlr4","GrammarLexer","GrammarParser","Trees","RuleContext","Utils","util","ErrorListener","ParserErrorListener","call","errors","prototype","Object","create","constructor","syntaxError","recognizer","offendingSymbol","line","column","msg","e","expected_tokens","_errHandler","getExpectedTokens","expected_tokens_names","i","intervals","length","v","j","start","stop","push","elementName","literalNames","symbolicNames","t","getCurrentToken","text","getTokenErrorDisplay","console","log","expected","begin","Math","min","end","max","INSTANCE","AstMongoTransformer","operatorToMongo","bind","literalToMongo","arrayToMongo","criteriaToMongo","queryToMongo","process","operator","literal","children","symbol","parseInt","substr","array","filter","c","rule","map","criteria","query","group_operator","tree","ruleNames","parser","s","getNodeText","escapeWhitespace","getChildCount","res","altNumber","getAltNumber","INVALID_ALT_NUMBER","ruleIndex","type","getChildren","astToJSON","antlr_tree","ast","ast_mongo_transformer","input","Date","chars","InputStream","lexer","tokens","CommonTokenStream","n","removeErrorListeners","addErrorListener","buildParseTrees","output","treeify","asTree","JSON","stringify"],"mappings":"AAAA;;;;;;ACAA;;;;AAIA,IAAMA,OAAOC,QAAQ,cAAR,EAAwBD,IAArC;;AAEAA;;;;;;;;;;;;;ACNA;AACA,IAAIE,SAASD,QAAQ,cAAR,CAAb;AACA,IAAIE,eAAeF,QAAQ,qBAAR,CAAnB;AACA,IAAIG,gBAAgBH,QAAQ,sBAAR,CAApB;AACA,IAAII,QAAQJ,QAAQ,mBAAR,EAA6BI,KAAzC;AACA,IAAIC,cAAcL,QAAQ,oBAAR,CAAlB;AACA,IAAIM,QAAQN,QAAQ,cAAR,CAAZ;AACA,IAAIO,OAAOP,QAAQ,MAAR,CAAX;AACA,IAAIQ,gBAAgBR,QAAQ,4BAAR,EAAsCQ,aAA1D;AACA;;AAEA;;AAEA,SAASC,mBAAT,GAA+B;AAC3BD,kBAAcE,IAAd,CAAmB,IAAnB;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,WAAO,IAAP;AACH;;AAEDF,oBAAoBG,SAApB,GAAgCC,OAAOC,MAAP,CAAcN,cAAcI,SAA5B,CAAhC;AACAH,oBAAoBG,SAApB,CAA8BG,WAA9B,GAA4CN,mBAA5C;;AAEAA,oBAAoBG,SAApB,CAA8BI,WAA9B,GAA4C,UAASC,UAAT,EAAqBC,eAArB,EAAsCC,IAAtC,EAA4CC,MAA5C,EAAoDC,GAApD,EAAyDC,CAAzD,EAA4D;AACpG,QAAIC,kBAAkBN,WAAWO,WAAX,CAAuBC,iBAAvB,CAAyCR,UAAzC,CAAtB;AACA,QAAIS,wBAAwB,EAA5B;;AAEA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,gBAAgBK,SAAhB,CAA0BC,MAA9C,EAAsDF,GAAtD,EAA2D;AACvD,YAAIG,IAAIP,gBAAgBK,SAAhB,CAA0BD,CAA1B,CAAR;AACA,aAAK,IAAII,IAAID,EAAEE,KAAf,EAAsBD,IAAID,EAAEG,IAA5B,EAAkCF,GAAlC,EAAuC;AACnCL,kCAAsBQ,IAAtB,CAA2BX,gBAAgBY,WAAhB,CAA4BlB,WAAWmB,YAAvC,EAAqDnB,WAAWoB,aAAhE,EAA+EN,CAA/E,CAA3B;AACH;AACJ;;AAED,QAAIO,IAAIrB,WAAWsB,eAAX,EAAR;AACA,QAAIC,OAAOvB,WAAWwB,oBAAX,CAAgCH,CAAhC,CAAX;AACAI,YAAQC,GAAR,CAAYzB,eAAZ;AACAwB,YAAQC,GAAR,CAAY1B,WAAWmB,YAAvB;AACAM,YAAQC,GAAR,CAAY,UAAZ,EAAwBjB,qBAAxB,EAA+C,YAA/C,EAA6Dc,IAA7D,EAAmE,SAAnE,EAA8EF,EAAEN,KAAhF,EAAuF,KAAvF,EAA8FM,EAAEL,IAAhG;AACA,SAAKtB,MAAL,CAAYuB,IAAZ,CAAiB;AACbU,kBAAUlB,qBADG;AAEbc,cAAMA,IAFO;AAGbK,eAAOC,KAAKC,GAAL,CAAST,EAAEN,KAAX,EAAkBM,EAAEL,IAApB,CAHM;AAIbe,aAAKF,KAAKG,GAAL,CAASX,EAAEN,KAAX,EAAkBM,EAAEL,IAApB;AAJQ,KAAjB;AAMH,CAtBD;;AAwBAxB,oBAAoByC,QAApB,GAA+B,IAAIzC,mBAAJ,EAA/B;AACA;;IAEM0C;AACF,mCAAc;AAAA;;AACV,aAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAvB;AACA,aAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AACA,aAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAApB;AACA,aAAKG,eAAL,GAAuB,KAAKA,eAAL,CAAqBH,IAArB,CAA0B,IAA1B,CAAvB;AACA,aAAKI,YAAL,GAAoB,KAAKA,YAAL,CAAkBJ,IAAlB,CAAuB,IAAvB,CAApB;AACA,aAAKK,OAAL,GAAe,KAAKA,OAAL,CAAaL,IAAb,CAAkB,IAAlB,CAAf;AACH;;;;wCAEeM,UAAU;AACtB,mBAAO;AACH,sBAAM,KADH;AAEH,sBAAM,MAFH;AAGH,sBAAM,MAHH;AAIH,qBAAK,KAJF;AAKH,qBAAK,KALF;AAMH,uBAAO,MANJ;AAOH,sBAAM,KAPH;AAQH,sBAAM;AARH,cASLA,QATK,CAAP;AAUH;;;uCAEcC,SAAS;AACpB,gBAAIA,QAAQC,QAAR,CAAiB,CAAjB,EAAoBC,MAApB,IAA8B,QAAlC,EACI,OAAOC,SAASH,QAAQC,QAAR,CAAiB,CAAjB,EAAoBrB,IAA7B,CAAP,CADJ,KAEK,IAAIoB,QAAQC,QAAR,CAAiB,CAAjB,EAAoBC,MAApB,IAA8B,QAAlC,EAA2C;AAChD,mBAAOF,QAAQC,QAAR,CAAiB,CAAjB,EAAoBrB,IAApB,CAAyBwB,MAAzB,CAAgC,CAAhC,EAAmCJ,QAAQC,QAAR,CAAiB,CAAjB,EAAoBrB,IAApB,CAAyBX,MAAzB,GAAkC,CAArE,CAAP;AACH;;;qCAEYoC,OAAO;AAChB,mBAAOA,MAAMJ,QAAN,CAAeK,MAAf,CAAsB;AAAA,uBAAKC,EAAEC,IAAF,IAAU,SAAf;AAAA,aAAtB,EAAgDC,GAAhD,CAAoD,KAAKf,cAAzD,CAAP;AACH;;;wCAEegB,UAAU;AACtB,gBAAIA,SAAST,QAAT,CAAkB,CAAlB,EAAqBO,IAArB,IAA6B,SAAjC,EAA4C;AACxC,2CACKE,SAAST,QAAT,CAAkB,CAAlB,EAAqBrB,IAD1B,sBAES,KAAKY,eAAL,CAAqBkB,SAAST,QAAT,CAAkB,CAAlB,EAAqBrB,IAA1C,CAFT,EAE2D,KAAKc,cAAL,CAAoBgB,SAAST,QAAT,CAAkB,CAAlB,CAApB,CAF3D;AAKH,aAND,MAOK;AACD,2CACKS,SAAST,QAAT,CAAkB,CAAlB,EAAqBrB,IAD1B,sBAES,KAAKY,eAAL,CAAqBkB,SAAST,QAAT,CAAkB,CAAlB,EAAqBrB,IAA1C,CAFT,EAE2D,KAAKe,YAAL,CAAkBe,SAAST,QAAT,CAAkB,CAAlB,CAAlB,CAF3D;AAKH;AAEJ;;;qCAEYU,OAAO;AAChB,gBAAIC,iBAAiB,IAArB;AACA,gBAAID,MAAMV,QAAN,CAAehC,MAAf,IAAyB,CAA7B,EACI,OAAO,KAAK2B,eAAL,CAAqBe,MAAMV,QAAN,CAAe,CAAf,CAArB,CAAP,CADJ,KAEK,IAAIU,MAAMV,QAAN,CAAehC,MAAf,IAAyB,CAA7B,EACD2C,iBAAiBD,MAAMV,QAAN,CAAe,CAAf,EAAkBrB,IAAnC,CADC,KAEA,IAAI+B,MAAMV,QAAN,CAAehC,MAAf,IAAyB,CAA7B,EACD2C,iBAAiBD,MAAMV,QAAN,CAAe,CAAf,EAAkBrB,IAAnC;;AAEJ,uCACK,KAAKY,eAAL,CAAqBoB,cAArB,CADL,EAC4CD,MAAMV,QAAN,CAAeK,MAAf,CAAsB;AAAA,uBAAKC,EAAEC,IAAF,IAAU,OAAf;AAAA,aAAtB,EAA8CC,GAA9C,CAAkD,KAAKZ,YAAvD,CAD5C;AAGH;;;kCAESgB,MAAMC,WAAWzD,YAAY;AAAA;;AACnCyD,wBAAYA,aAAa,IAAzB;AACAzD,yBAAaA,aAAaA,UAAb,GAA2BwD,OAAOA,KAAKE,MAAZ,GAAqB,IAA7D;AACA,gBAAG1D,UAAH,EAAe;AACXyD,4BAAYzD,WAAWyD,SAAvB;AACH;;AAED,gBAAIE,IAAIxE,MAAMyE,WAAN,CAAkBJ,IAAlB,EAAwBC,SAAxB,CAAR;AACJ;;AAEIE,gBAAItE,MAAMwE,gBAAN,CAAuBF,CAAvB,EAA0B,KAA1B,CAAJ;AACA,gBAAIT,IAAIM,KAAKM,aAAL,EAAR;AACA,gBAAIC,MAAM,EAAV;AACA,gBAAIP,gBAAgBpE,YAAYA,WAAhC,EAA6C;AACzC,oBAAI4E,YAAYR,KAAKS,YAAL,EAAhB;AACA,oBAAKD,aAAW5E,YAAY8E,kBAA5B,EAAiD;AAC7CH,wBAAIZ,IAAJ,GAAWM,UAAUD,KAAKW,SAAf,IAA0B,GAA1B,GAA8BH,SAAzC;AACH;AACDD,oBAAIZ,IAAJ,GAAWM,UAAUD,KAAKW,SAAf,CAAX;AACH,aAND,MAOK,IAAIX,KAAKX,MAAT,EAAiB;AAClBkB,oBAAIlB,MAAJ,GAAa7C,WAAWmB,YAAX,CAAwBqC,KAAKX,MAAL,CAAYuB,IAApC,KAA6CpE,WAAWoB,aAAX,CAAyBoC,KAAKX,MAAL,CAAYuB,IAArC,CAA1D,CADkB,CACmF;AACrGL,oBAAIxC,IAAJ,GAAWiC,KAAKX,MAAL,CAAYtB,IAAvB;AACH;AACDwC,gBAAInB,QAAJ,GAAczD,MAAMkF,WAAN,CAAkBb,IAAlB,EAAwBJ,GAAxB,CAA4B;AAAA,uBAAK,MAAKkB,SAAL,CAAepB,CAAf,EAAkBO,SAAlB,EAA6BzD,UAA7B,CAAL;AAAA,aAA5B,CAAd;AACA,mBAAO+D,GAAP;AACH;;;gCAEOQ,YAAY;AAChB,gBAAMC,MAAM,KAAKF,SAAL,CAAeC,UAAf,CAAZ;AACA,mBAAO,KAAK/B,YAAL,CAAkBgC,IAAI5B,QAAJ,CAAa,CAAb,CAAlB,CAAP;AACH;;;;;;AAGL,IAAM6B,wBAAwB,IAAIvC,mBAAJ,EAA9B;;AAEA,IAAMpD,OAAO,SAAPA,IAAO,GAAW;AACpB,QAAI4F,QAAQ,8CAAZ;AACAjD,YAAQC,GAAR,CAAY,IAAIiD,IAAJ,EAAZ;AACAlD,YAAQC,GAAR,CAAY,cAAcgD,KAAd,GAAsB,GAAlC;AACAjD,YAAQC,GAAR,CAAY,+BAAZ;AACA,QAAIkD,QAAQ,IAAI5F,OAAO6F,WAAX,CAAuBH,KAAvB,CAAZ;AACA,QAAII,QAAQ,IAAI7F,aAAaA,YAAjB,CAA8B2F,KAA9B,CAAZ;AACA,QAAIG,SAAU,IAAI/F,OAAOgG,iBAAX,CAA6BF,KAA7B,CAAd;AACA,QAAIpB,SAAS,IAAIxE,cAAcA,aAAlB,CAAgC6F,MAAhC,CAAb;AACArB,WAAOvC,YAAP,GAAsBuC,OAAOvC,YAAP,CAAoBiC,GAApB,CAAwB;AAAA,eAAK,CAAC6B,CAAD,GAAK,IAAL,GAAYA,EAAElC,MAAF,CAAS,CAAT,EAAYkC,EAAErE,MAAF,GAAW,CAAvB,CAAjB;AAAA,KAAxB,CAAtB;AACA8C,WAAOwB,oBAAP;AACAxB,WAAOyB,gBAAP,CAAwB3F,oBAAoByC,QAA5C;;AAGAyB,WAAO0B,eAAP,GAAyB,IAAzB;AACA,QAAI5B,OAAOE,OAAO5E,IAAP,EAAX;AACA,QAAMuG,SAASZ,sBAAsBhC,OAAtB,CAA8Be,IAA9B,CAAf;AACJ;;AAEI,QAAI8B,UAAUvG,QAAQ,SAAR,CAAd;AACA0C,YAAQC,GAAR,CAAY4D,QAAQC,MAAR,CAAeF,MAAf,EAAuB,IAAvB,CAAZ;AACA5D,YAAQC,GAAR,CAAY4D,QAAQC,MAAR,CAAe/F,oBAAoByC,QAApB,CAA6BvC,MAA5C,EAAoD,IAApD,CAAZ;;AAEA+B,YAAQC,GAAR,CAAY8D,KAAKC,SAAL,CAAehB,sBAAsBhC,OAAtB,CAA8Be,IAA9B,CAAf,EAAoD,IAApD,EAA0D,CAA1D,CAAZ;AACH,CAxBD;;AA0BA1E;;kBAEe,EAACA,MAAMA,IAAP","file":"all.js","sourcesContent":["/**\n * Created by perceval on 11/12/2016.\n */\n\n","/**\n * Created by perceval on 11/12/2016.\n */\n\nconst main = require('../src/index').main;\n\nmain();","// region INCLUDES\nvar antlr4 = require('antlr4/index');\nvar GrammarLexer = require('../gen/GrammarLexer');\nvar GrammarParser = require('../gen/GrammarParser');\nvar Trees = require('antlr4/tree/Trees').Trees;\nvar RuleContext = require('antlr4/RuleContext');\nvar Utils = require('antlr4/Utils');\nvar util = require('util');\nvar ErrorListener = require('antlr4/error/ErrorListener').ErrorListener;\n// endregion INCLUDES\n\n// region ParserErrorListener Definition\n\nfunction ParserErrorListener() {\n    ErrorListener.call(this);\n    this.errors = [];\n    return this;\n}\n\nParserErrorListener.prototype = Object.create(ErrorListener.prototype);\nParserErrorListener.prototype.constructor = ParserErrorListener;\n\nParserErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {\n    var expected_tokens = recognizer._errHandler.getExpectedTokens(recognizer);\n    var expected_tokens_names = [];\n\n    for (var i = 0; i < expected_tokens.intervals.length; i++) {\n        var v = expected_tokens.intervals[i];\n        for (var j = v.start; j < v.stop; j++) {\n            expected_tokens_names.push(expected_tokens.elementName(recognizer.literalNames, recognizer.symbolicNames, j));\n        }\n    }\n\n    var t = recognizer.getCurrentToken();\n    var text = recognizer.getTokenErrorDisplay(t);\n    console.log(offendingSymbol);\n    console.log(recognizer.literalNames);\n    console.log(\"expected\", expected_tokens_names, \"instead of\", text, \"between\", t.start, \"and\", t.stop)\n    this.errors.push({\n        expected: expected_tokens_names,\n        text: text,\n        begin: Math.min(t.start, t.stop),\n        end: Math.max(t.start, t.stop),\n    });\n};\n\nParserErrorListener.INSTANCE = new ParserErrorListener();\n// endregion\n\nclass AstMongoTransformer {\n    constructor() {\n        this.operatorToMongo = this.operatorToMongo.bind(this);\n        this.literalToMongo = this.literalToMongo.bind(this);\n        this.arrayToMongo = this.arrayToMongo.bind(this);\n        this.criteriaToMongo = this.criteriaToMongo.bind(this);\n        this.queryToMongo = this.queryToMongo.bind(this);\n        this.process = this.process.bind(this);\n    }\n\n    operatorToMongo(operator) {\n        return {\n            '==': '$eq',\n            '>=': '$gte',\n            '<=': '$lte',\n            '<': '$lt',\n            '>': '$gt',\n            'AND': '$and',\n            'IN': '$in',\n            'OR': '$or'\n        }[operator];\n    }\n\n    literalToMongo(literal) {\n        if (literal.children[0].symbol == 'NUMBER')\n            return parseInt(literal.children[0].text)\n        else if (literal.children[0].symbol == 'STRING');\n        return literal.children[0].text.substr(1, literal.children[0].text.length - 2);\n    }\n\n    arrayToMongo(array) {\n        return array.children.filter(c => c.rule == 'literal').map(this.literalToMongo);\n    }\n\n    criteriaToMongo(criteria) {\n        if (criteria.children[2].rule == 'literal') {\n            return {\n                [criteria.children[0].text]: {\n                    [this.operatorToMongo(criteria.children[1].text)]: this.literalToMongo(criteria.children[2])\n                }\n            }\n        }\n        else {\n            return {\n                [criteria.children[0].text]: {\n                    [this.operatorToMongo(criteria.children[1].text)]: this.arrayToMongo(criteria.children[2])\n                }\n            }\n        }\n\n    }\n\n    queryToMongo(query) {\n        let group_operator = null;\n        if (query.children.length == 1)\n            return this.criteriaToMongo(query.children[0]);\n        else if (query.children.length == 3)\n            group_operator = query.children[1].text;\n        else if (query.children.length == 5)\n            group_operator = query.children[2].text;\n\n        return {\n            [this.operatorToMongo(group_operator)]: query.children.filter(c => c.rule == 'query').map(this.queryToMongo)\n        };\n    }\n\n    astToJSON(tree, ruleNames, recognizer) {\n        ruleNames = ruleNames || null;\n        recognizer = recognizer ? recognizer : (tree ? tree.parser : null);\n        if(recognizer) {\n            ruleNames = recognizer.ruleNames;\n        }\n\n        var s = Trees.getNodeText(tree, ruleNames);\n    //    console.log(\"TREE\", util.inspect(tree, {depth: 1}));\n\n        s = Utils.escapeWhitespace(s, false);\n        var c = tree.getChildCount();\n        var res = {};\n        if (tree instanceof RuleContext.RuleContext) {\n            var altNumber = tree.getAltNumber();\n            if ( altNumber!=RuleContext.INVALID_ALT_NUMBER ) {\n                res.rule = ruleNames[tree.ruleIndex]+\":\"+altNumber;\n            }\n            res.rule = ruleNames[tree.ruleIndex];\n        }\n        else if (tree.symbol) {\n            res.symbol = recognizer.literalNames[tree.symbol.type] || recognizer.symbolicNames[tree.symbol.type];//.toString(recognizer.literalNames, recognizer.symbolicNames))\n            res.text = tree.symbol.text;\n        }\n        res.children= Trees.getChildren(tree).map(c => this.astToJSON(c, ruleNames, recognizer));\n        return res;\n    };\n\n    process(antlr_tree) {\n        const ast = this.astToJSON(antlr_tree);\n        return this.queryToMongo(ast.children[0]);\n    }\n}\n\nconst ast_mongo_transformer = new AstMongoTransformer();\n\nconst main = function() {\n    var input = 'ask == \"test\" AND trades ON 5,6 AND mod == 3';\n    console.log(new Date());\n    console.log(\"INPUT : '\" + input + \"'\");\n    console.log(\"=============================\");\n    var chars = new antlr4.InputStream(input);\n    var lexer = new GrammarLexer.GrammarLexer(chars);\n    var tokens  = new antlr4.CommonTokenStream(lexer);\n    var parser = new GrammarParser.GrammarParser(tokens);\n    parser.literalNames = parser.literalNames.map(n => !n ? null : n.substr(1, n.length - 2));\n    parser.removeErrorListeners();\n    parser.addErrorListener(ParserErrorListener.INSTANCE);\n\n\n    parser.buildParseTrees = true;\n    var tree = parser.main();\n    const output = ast_mongo_transformer.process(tree);\n//console.log(\"Parsed: \"+ util.inspect(tree));\n\n    var treeify = require('treeify');\n    console.log(treeify.asTree(output, true));\n    console.log(treeify.asTree(ParserErrorListener.INSTANCE.errors, true));\n\n    console.log(JSON.stringify(ast_mongo_transformer.process(tree), null, 2));\n};\n\nmain();\n\nexport default {main: main};"]}