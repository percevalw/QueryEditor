{"version":3,"sources":["index-compiled.js","index.js"],"names":["_classCallCheck","instance","Constructor","TypeError","templates","name","json","$and","StateMachine","initial","transitions","antlr4","require","NumbersLexer","NumbersParser","input","chars","InputStream","lexer","tokens","CommonTokenStream","parser","buildParseTrees","tree","parse","console","log"],"mappings":"AAAA;;AAEA,SAASA,eAAT,CAAyBC,QAAzB,EAAmCC,WAAnC,EAAgD;AAAE,QAAI,EAAED,oBAAoBC,WAAtB,CAAJ,EAAwC;AAAE,cAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;;AAEzJ;;;;AAIA,IAAIC,YAAY;AACZ,YAAQ;AACJC,cAAM;AADF,KADI;AAIZ,aAAS;AACLA,cAAM;AADD;AAJG,CAAhB;;AASA,IAAIC,OAAO;AACPC,UAAM,CAAC;AACH,gBAAQ,CADL;AAEH,iBAAS;AAFN,KAAD;AADC,CAAX;;AAOA,IAAIC,eAAe,SAASA,YAAT,CAAsBC,OAAtB,EAA+BC,WAA/B,EAA4C;AAC3DV,oBAAgB,IAAhB,EAAsBQ,YAAtB;;AAEA,SAAKC,OAAL,GAAeA,OAAf;AACH,CAJD;;AAMA;;;AC9BA,IAAIE,SAASC,QAAQ,cAAR,CAAb;AACA,IAAIC,eAAeD,QAAQ,qBAAR,CAAnB;AACA,IAAIE,gBAAgBF,QAAQ,sBAAR,CAApB;AACA,IAAIG,QAAQ,iBAAZ;AACA,IAAIC,QAAQ,IAAIL,OAAOM,WAAX,CAAuBF,KAAvB,CAAZ;AACA,IAAIG,QAAQ,IAAIL,aAAaA,YAAjB,CAA8BG,KAA9B,CAAZ;AACA,IAAIG,SAAU,IAAIR,OAAOS,iBAAX,CAA6BF,KAA7B,CAAd;AACA,IAAIG,SAAS,IAAIP,cAAcA,aAAlB,CAAgCK,MAAhC,CAAb;AACAE,OAAOC,eAAP,GAAyB,IAAzB;AACA,IAAIC,OAAOF,OAAOG,KAAP,EAAX;AACAC,QAAQC,GAAR,CAAY,aAAYH,IAAxB","file":"all.js","sourcesContent":["\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by perceval on 03/12/2016.\n */\n\nvar templates = {\n    \"test\": {\n        name: \"Test\"\n    },\n    \"essai\": {\n        name: \"Test\"\n    }\n};\n\nvar json = {\n    $and: [{\n        \"test\": 1,\n        \"essai\": 2\n    }]\n};\n\nvar StateMachine = function StateMachine(initial, transitions) {\n    _classCallCheck(this, StateMachine);\n\n    this.initial = initial;\n};\n\n//# sourceMappingURL=index-compiled.js.map","var antlr4 = require('antlr4/index');\nvar NumbersLexer = require('../gen/NumbersLexer');\nvar NumbersParser = require('../gen/NumbersParser');\nvar input = \"128,100,900,200\";\nvar chars = new antlr4.InputStream(input);\nvar lexer = new NumbersLexer.NumbersLexer(chars);\nvar tokens  = new antlr4.CommonTokenStream(lexer);\nvar parser = new NumbersParser.NumbersParser(tokens);\nparser.buildParseTrees = true;\nvar tree = parser.parse();\nconsole.log(\"Parsed: \"+ tree);\n"]}