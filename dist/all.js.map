{"version":3,"sources":["index-compiled.js","index.js"],"names":["_classCallCheck","instance","Constructor","TypeError","templates","name","json","$and","StateMachine","initial","transitions","antlr4","require","NumbersLexer","NumbersParser","util","ErrorListener","TestGrammarErrorListener","call","partialLastToken","errors","prototype","Object","create","constructor","syntaxError","recognizer","offendingSymbol","line","column","msg","e","push","arguments","console","log","typeAssistTokens","parser","_ctx","tokens","getTokenStream","length","lastToken","tokenType","symbolicNames","type","indexOf","text","INSTANCE","input","chars","InputStream","lexer","CommonTokenStream","removeErrorListeners","addErrorListener","buildParseTrees","tree","query","children","toStringTree"],"mappings":"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","file":"all.js","sourcesContent":["\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by perceval on 03/12/2016.\n */\n\nvar templates = {\n    \"test\": {\n        name: \"Test\"\n    },\n    \"essai\": {\n        name: \"Test\"\n    }\n};\n\nvar json = {\n    $and: [{\n        \"test\": 1,\n        \"essai\": 2\n    }]\n};\n\nvar StateMachine = function StateMachine(initial, transitions) {\n    _classCallCheck(this, StateMachine);\n\n    this.initial = initial;\n};\n\n//# sourceMappingURL=index-compiled.js.map","var antlr4 = require('antlr4/index');\nvar NumbersLexer = require('../gen/NumbersLexer');\nvar NumbersParser = require('../gen/NumbersParser');\nvar util = require('util');\n\nvar ErrorListener = require('antlr4/error/ErrorListener').ErrorListener;\nfunction TestGrammarErrorListener() {\n    ErrorListener.call(this);\n    this.partialLastToken = null;\n    this.errors = [];\n    return this;\n}\n\nTestGrammarErrorListener.prototype = Object.create(ErrorListener.prototype);\nTestGrammarErrorListener.prototype.constructor = TestGrammarErrorListener;\n\nTestGrammarErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {\n    this.errors.push(arguments);\n\n    console.log(offendingSymbol);\n\n    this.partialLastToken = null;\n    var typeAssistTokens = [\"Fruits\"];\n    var parser = recognizer._ctx.parser,\n        tokens = parser.getTokenStream().tokens;\n\n    // last token is always \"fake\" EOF token\n    if (tokens.length > 1) {\n        var lastToken = tokens[tokens.length - 2],\n            tokenType = parser.symbolicNames[lastToken.type];\n\n        this.tokenType = tokenType;\n        console.log(\"tokenType\", tokenType)\n        if (typeAssistTokens.indexOf(tokenType) >= 0) {\n            this.partialLastToken = lastToken.text;\n            console.log(this.partialLastToken);\n        }\n    }\n};\n\nTestGrammarErrorListener.INSTANCE = new TestGrammarErrorListener()\n\n\nvar input = 'count ';\nvar chars = new antlr4.InputStream(input);\nvar lexer = new NumbersLexer.NumbersLexer(chars);\nvar tokens  = new antlr4.CommonTokenStream(lexer);\nvar parser = new NumbersParser.NumbersParser(tokens);\nparser.removeErrorListeners();\nparser.addErrorListener(TestGrammarErrorListener.INSTANCE);\n\nparser.buildParseTrees = true;\nvar tree = parser.query();\n//console.log(\"Parsed: \"+ util.inspect(tree));\nvar children = tree.toStringTree([\"query\", 'countRule', 'fruitRule']);\nconsole.log(children);"]}